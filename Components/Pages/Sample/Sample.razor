@page "/sample"
@inject IJSRuntime JS
@rendermode InteractiveServer
<h3>【ユーザーの追加と表示】</h3>
<div class="main-container">
    <div>
        <label>【Name】</label>
        <input @bind="newUserName" />
    </div>
    <div>
        <label>【Age】</label>
        <input type="number" @bind="newUserAge" />
    </div>
    <button type="button" @onclick="AddUser">Add User</button>

    <h4><b>登録済みユーザー一覧（年齢順）</b></h4>
    @foreach (User user in users.OrderBy(u => u.Age))
    {
        <p>【Name】@user.Name<br>【Age】@user.Age 歳</p>
    }

</div>


@code {
    private string newUserName = string.Empty;
    private int newUserAge;
    private List<User> users = new List<User>();
    protected override void OnInitialized()
    {
        users = new List<User>
{
new User { Id = 1, Name = "Alice", Age = 32 },
new User { Id = 2, Name = "Bob", Age = 28 },
new User { Id = 3, Name = "Charlie", Age = 45 },
new User { Id = 4, Name = "David", Age = 23 },
new User { Id = 5, Name = "Eve", Age = 35 }
};
    }

    private async Task AddUser()
    {
        if (!string.IsNullOrWhiteSpace(newUserName) && newUserAge >= 0)
        {
            int nextId = users.Max(u => u.Id) + 1;
            users.Add(new User { Id = nextId, Name = newUserName, Age = newUserAge });
            await JS.InvokeVoidAsync("alert", $"{newUserName}さんを追加しました。");
            newUserName = string.Empty;
            newUserAge = 0;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "名前を入力してください");
        }
    }
    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Age { get; set; }
    }

}
